// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user{
  id              String     @id @default(uuid())
  username        String     @db.VarChar(96)
  password        String     @db.VarChar(128)
  email           String     @db.VarChar(256)
  group_id        Int  
  active          Boolean    @default(true)

  last_login_time     DateTime?
  current_login_time  DateTime?
  tfa                 Boolean? 
  secret_tfa               String?
  is_gold             Boolean @default(false)
  date_request_gold     DateTime?
  gold_code             String? @db.VarChar(6) 
  // created_by  Int  @default(0) // default each person create himself
  // created_at DateTime? @default(now())

  users_in_roles_ids  users_in_roles[]
  group           group  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  session_ids     session[]
  password_recovry_ids     password_recovery[]

  @@unique([username,group_id],name:"unique_username_group_id" ) 
}
model password_recovery {
  id            Int      @id @default(autoincrement())
  user_id       String
  hash          String
  password_recovered          Boolean @default(false)
  create_time        DateTime @default(now())
  user          user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
model group {
  // groups = wilayas
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(128)

  roles_in_groups_ids roles_in_groups[]
  users_ids      user[]
}

model role{
  id              Int      @id @default(autoincrement())
  machine_name    String   @db.VarChar(64) @unique
  name            String   @db.VarChar(128)
  //visible         Boolean @default(true)
  users_in_roles_ids  users_in_roles[]
  permissions_in_roles_ids permissions_in_roles[]
  roles_in_groups_ids roles_in_groups[]


}

model users_in_roles {
  id              Int      @id @default(autoincrement())
  user_id       String
  role_id       Int

  user          user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role          role  @relation(fields: [role_id], references: [id], onDelete: Cascade)
}
model roles_in_groups {
  id              Int      @id @default(autoincrement())
  role_id         Int
  group_id  Int

  role           role  @relation(fields: [role_id], references: [id], onDelete: Cascade)
  group          group  @relation(fields: [group_id], references: [id], onDelete: Cascade)

}

model permission{
  id              Int      @id @default(autoincrement())
  machine_name    String   @db.VarChar(64) @unique
  name            String

  permissions_in_roles_ids permissions_in_roles[]
}

model permissions_in_roles{
  id              Int      @id @default(autoincrement())
  permission_id   Int
  role_id         Int

  permission      permission  @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role            role  @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

// model profile{
//   id                  Int      @id @default(autoincrement())
//   user_id             String
//   fullname            String
//   org_id              Int?
//   name_fr             String?  
//   is_gold             Boolean @default(false)
//   date_request_gold   DateTime?
//   address             String?
//   email               String?
//   telephone           String? 
//   facebook            String?
//   twitter             String?
//   instagram           String?
//   youtube             String? 
//   theme               String? @db.VarChar(24)
//   photo               String? 
// }

model session {
  id              Int      @id @default(autoincrement())
  refresh_token   String   @db.VarChar(2048)
  user_id         String
  user          user  @relation(fields: [user_id], references: [id], onDelete: Cascade)

}